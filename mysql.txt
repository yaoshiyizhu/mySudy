学习记录：
/etc/init.d/bt default
宝塔面板重置
查看linux 是6或者7
cat /etc/redhat-release

alter user 'root'@'localhost' identified by 'yW@123987';
mysql8.0重置密码：
修改ini文件
添加skip-grant-tables
重启mysql服务
use mysql
 update user set authentication_string='' where user='root';
去掉ini里的skip-grant-tables
重启mysql服务
set global validate_password.policy=0;
set global validate_password.policy=1;
alter user 'root'@'localhost' identified by 'root@root'
flush privileges;
 

show variables like "%commit%"
redo ->ib_logfile0->重做日志
undo->ibdat 
日志先行
myisam ->不支持-》伪事务
行锁：锁住某一行数据，被锁住的数据就不能再操作
原子性：要么一起成功，要么一起失败、
一致性：保证数据由一种状态转化为另一种状态
隔离性：互不打扰
持久性：数据会保存到重做日志

回滚日志：
1：事务ID，操作数据元素，操作前的数据，操作后的数据
查看事务的ID
show engine innodb status;


隔离级别：
未授权读(RU) （未提交读）。存在赃读，也会存在不可重复读
解决的问题：没有使用
授权读（RC）（已提交读），解决的问题：赃读，产生不可重复读
可重复读（RR），8.0不会出现幻读问题
序列化(serializable) 高并发最低，问题少，安全性最高
拍好队一个一个来

事务既然这么好
提高查询效率

事务隔离级别的实现
未授权读:redo log 与 ando_log 实现
授权读：使用排他锁，不允许其他事务修改数据,同时也不能查询
可重复读：数据会放入缓存区，数据的修改会加锁
序列化：串行化，行锁
innodb_flush_log_at_trx_commit 影响数据刷新



show gloab variables like "transaction_isolation%"
第五节课
mysql -uroot -p 这种方式属于socket 

mysql.sock出现丢失
1，重启mysql服务，重新配置
2，重新复制mysql.sock

mysql -uroot -p -ip 属于http方式


服务端

连接层 1：判断用户密码校验，如果出现异常，返回并抛出异常
2,对于校验后的连接会分配一个线程管理这个连接
3，查询用户的权限，对于表的操作权限
4，返回连接Id 

sql层： 接收到所有连接层传递的sql语句


show variables like "%max_connections%"
show processlist ;查看连接数

连接

存储引擎



查询分析：
explain profiel

partions:参数的使用
type :类型-》
all:全表扫描，效率最低
index：const,reag,eq_ref
key :最终使用的索引
extra:这里描述的是细节信息
		null:标识索引，如果key中索引标识回表-》使用了索引，但是效率不一定很高
		using index；覆盖索引-》直接通过索引获取到了数据（效率最高）
		using where 根据条件过滤，虽然可能使用了索引，但是还是会根据where条件对数据进行过滤
		using temporary：意味着产生了一个临时表
		using filesort ：会对于数据在索引外进行了排序操作
		
		
mysql 多表优化
join优化的本质
Join查询如何实现？
算法：递归的方式
循环去匹配 效率最低的一种，是在我们没有使用索引的情况下
因为mysql优化器先获取表的结构-》再获取关联字段-》where
小的结果集驱动大的结果集

join的优化思路
where 条件过滤的过程

mysql 主从原理
中继日志的说明：主要是mysql主从复制时，在从服务器中开启。
主要作用：
当从服务器想要和主服务器进行数据同步时，io线程将主服务的binlog内容记录到中继日志，会有
sql线程去运行中继日志中的内容
show variables like "%relay%";

主从复制的步骤：
1，确保从服务器与主服务器的数据保持一致
2.主服务器：
2.1 开启binlog日志：
log-bin = mysql-bin
server-id = 1 根据你的ip来设置
2.2：在主数据库创建一个用于主从复制的用户并授权
3.从服务器
binlog建议开启
3.2 配置从节点



主从复制数据延迟
pt-heartbeat 检测数据的延迟
处理：
1 网络不管
2 从的数据写入的速度如何提升问题？
处理：1电脑配置的升级-》升级从库-》从库的配置可以高于主库
2 对于所有的写都会是开启事务，执行后立马关闭事务-》commit -》commit数据写入的时间0，1，2
innodb_flush_log_at_trx_commit
sync_binglog =1,N
结合redis做一个缓存处理


设置

SET GLOBAL sql_mode ='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'

SET global sql_mode = 'NO_UNSIGNED_SUBTRACTION,NO_ENGINE_SUBSTITUTION';
